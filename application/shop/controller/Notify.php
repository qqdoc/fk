<?php

namespace app\shop\controller;

use app\common\controller\Fun;
use app\common\controller\Hm;
use think\Controller;
use think\Db;
use think\Cache;
use app\common\controller\dock\Kky;
use app\common\controller\dock\Dock;
use app\common\controller\dock\Yile;
use app\common\controller\Email;
use think\Session;

/**
 * 回调类
 */
class Notify extends Controller {

    public $site = [];

    public $timestamp = null;

    public function _initialize() {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->site = \think\Config::get('site');
        $this->timestamp = time();
        $active_plugins = Db::name('options')->where(['option_name' => 'active_plugin'])->value('option_content');
        $active_plugins = empty($active_plugins) ? [] : unserialize($active_plugins);
        if ($active_plugins && is_array($active_plugins)) {
            foreach($active_plugins as $plugin) {
                if(true === checkPlugin($plugin) && substr($plugin, -13) != '_template.php' && substr($plugin, -8) != '_pay.php') {
                    include_once(ROOT_PATH . 'public/content/plugin/' . $plugin);
                }
            }
        }
    }

    public function test(){
        $order = db::name('order')->where(['id' => 1])->find();
        $goods = db::name('goods')->where(['id' => $order['goods_id']])->find();
        doAction('order_notify', $order, $goods);
    }


    /**
     * 充值回调通知
     */
    public function recharge_notify(){

        $timestamp = time(); //时间戳
        $receive_type = $this->request->param('receive_type'); //接收回调报文的方式
        $out_trade_no = $this->request->param('out_trade_no'); //订单号
        $notice_type = $this->request->param('notice_type'); //通知方式 同步或异步
        switch($receive_type){
            case 'input':
                $content = file_get_contents("php://input");
                break;
            case 'post':
                $content = $this->request->post();
                break;
            case 'get':
                $content = $this->request->get();
                break;
        }

        if(cache::has($out_trade_no)){
            sleep(1);
            if($notice_type == 'notify'){
                echo 'success'; die;
            }else{
                header("location: /user.html"); die;
            }
        }

        cache::set($out_trade_no, true);

        $recharge = db::name('recharge')->where(['out_trade_no' => $out_trade_no])->find();

        if(!empty($recharge['pay_time'])){ //重复通知
            if($notice_type == 'notify'){
                echo 'success'; die;
            }else{
                header("location: /user.html"); die;
            }

        }

        $pluginPath = ROOT_PATH . 'public/content/plugin/' . $recharge['pay_plugin'] . '/' . $recharge['pay_plugin'] . '.php';
        require_once $pluginPath;

        $check_sign = checkSign($content);

        if($check_sign){ //验签成功

            $update = [
                'pay_time' => $timestamp, //支付时间
            ];

            db::name('recharge')->where(['out_trade_no' => $out_trade_no])->update($update);
            db::name('user')->where(['id' => $recharge['user_id']])->setInc('money', $recharge['money']);

            cache::rm($out_trade_no);


            if($notice_type == 'notify'){
                echo 'success'; die;
            }else{
                header("location: /user.html"); die;
            }

        }else{
            cache::rm($out_trade_no);
            if($notice_type == 'notify'){
                echo 'fail'; die;
            }else{
                echo '验签失败'; die;
            }
        }

    }



    /**
     * 回调通知
     */
    public function index(){

        $timestamp = time(); //时间戳
        $receive_type = $this->request->param('receive_type'); //接收回调报文的方式
        $out_trade_no = empty($this->request->has('out_trade_no')) ? null : $this->request->param('out_trade_no'); //订单号
        $notice_type = $this->request->param('notice_type'); //通知方式 同步或异步
        switch($receive_type){
            case 'input':
                $content = file_get_contents("php://input");
                break;
            case 'stripe':
                $content = $this->request->post();
                break;
            case 'post':
                $content = $this->request->post();
                break;
            case 'get':
                $content = $this->request->get();
                break;
        }

//        db::name('test')->insert(['content' => json_encode($content), 'createtime' => $this->timestamp]);
        if($out_trade_no){
            $order = db::name('order')->where(['order_no' => $out_trade_no])->find();

            if($order['status'] != 'wait-pay'){ //重复通知
                if($notice_type == 'notify'){
                    echo 'success'; die;
                }else{
                    header("location: /order.html?order_no={$out_trade_no}"); die;
                }

            }
        }
        if($receive_type == 'stripe'){
            $pluginPath = ROOT_PATH . 'public/content/plugin/stripe_pay/stripe_pay.php';
        }else{
            $pluginPath = ROOT_PATH . 'public/content/plugin/' . $order['pay_plugin'] . '/' . $order['pay_plugin'] . '.php';
        }

        require_once $pluginPath;

        $check_sign = checkSign($content);

        if($check_sign){ //验签成功
            if(!$out_trade_no){
                $order = db::name('order')->where(['order_no' => $check_sign])->find();
                if($order['status'] != 'wait-pay'){ //重复通知
                    if($notice_type == 'notify'){
                        echo 'success2'; die;
                    }else{
                        header("location: /order.html?order_no={$check_sign}"); die;
                    }

                }
            }
            $goods = db::name('goods')->where(['id' => $order['goods_id']])->find();

            $update = [
                'status' => 'wait-send', // 通知后改为代发货
                'pay_time' => $timestamp, //支付时间
            ];
            $order['pay_time'] = $timestamp;
            db::name('order')->where(['id' => $order['id']])->update($update);

            Hm::handleOrder($goods, $order, $this->site);

            try{
                if($this->site['user_order_email'] == 1) Email::sendOrderUser($goods, $order['id'], $this->site);
                if($this->site['admin_order_email'] == 1) Email::sendOrderBoss($goods, $order['id'], $this->site);
            }catch(\Exception $e){}
            try{
                doAction('order_notify', $order, $goods);
            }catch(\Exception $e){}

            cache::rm($out_trade_no);


            if($notice_type == 'notify'){
                echo 'success'; die;
            }else{
                header("location: /order.html?order_no={$out_trade_no}"); die;
            }

        }else{
            cache::rm($out_trade_no);
            if($notice_type == 'notify'){
                echo 'fail'; die;
            }else{
                echo '验签失败'; die;
            }
        }

    }

    /**
     * 对接回调
     */
    public function dock_callback_order(){
        $param = file_get_contents('php://input');
        $content = json_encode($param);
        db::name('test')->insert(['content' => $content, 'createtime' => $this->timestamp]);
    }




    //记录用户账单
    public function record_user_bill($order, $goods, $timestamp){
        $bill_insert = [
            'uid' => $order['uid'],
            'description' => '购买商品 ' . $goods['name'] . ' x' . $order['buy_num'],
            'createtime' => $timestamp,
            'value' => '-' . sprintf("%.2f", $order['money']),
            'type' => 'goods', //购买商品
        ];
        db::name('money_bill')->insert($bill_insert);
        db::name("user")->where(["id" => $order["uid"]])->setInc("consume", $order["money"]);
    }




}
